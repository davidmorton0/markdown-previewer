{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","defaultText","markedOptions","breaks","Previewer","state","markdown","htmlPreview","loading","this","setState","text","marked","id","document","getElementById","innerHTML","event","target","value","onChange","updateText","bind","React","Component","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAIC,EAAW,2ZA0BXC,EAAgB,CAClBC,QAAQ,G,IAOJC,E,YACJ,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,SAAUL,EACVM,YAAa,EAAKA,YAAYN,GAC9BO,SAAS,GALC,E,iFAUZC,KAAKC,SAAS,CACZF,SAAS,M,kCAIDG,GACV,OAAOC,IAAOD,EAAMT,K,2CArBxB,IAAqBW,EAAIF,EAyBhBF,KAAKJ,MAAMG,UAzBCK,EA0BH,UA1BOF,EA0BIF,KAAKJ,MAAMC,SAzBtCQ,SAASC,eAAeF,GAAIG,UAAYJ,IAAOD,EAAMT,M,iCA6B1Ce,GACTR,KAAKC,SAAS,CACZJ,SAAUW,EAAMC,OAAOC,MACvBZ,YAAaE,KAAKF,YAAYU,EAAMC,OAAOC,W,+BAK7C,OAAQ,6BACE,wBAAIN,GAAG,WAAP,YACA,8BAAUA,GAAG,SAASM,MAAOV,KAAKJ,MAAMC,SAAUc,SAAUX,KAAKY,WAAWC,KAAKb,OAAQR,GACzF,wBAAIY,GAAG,WAAP,QACA,8BAAUA,GAAG,gBAAgBJ,KAAKJ,MAAME,aACxC,wBAAIM,GAAG,WAAP,gB,GAvCUU,IAAMC,WA6C9BD,IAAME,OAAO,kBAAC,EAAD,MAAeX,SAASC,eAAe,QD8C9C,kBAAmBW,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09c1f929.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport marked from 'marked';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nvar defaultText = `# H1 Heading\n## H2 Heading\n[An inline-style link](https://www.google.com)\n\n<table>\n  <tr>\n    <td>A Table</td>\n    <td>from</td>\n    <td>inline html</td>\n  </tr>\n</table>\n\n\\`Inline code\\`\n\n    A code block\nA List:\n1. Item 1\n2. Item 2\n3. Item 3\n\n> A blockquote\n\n![An image](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Markdown Logo\")\n\n**bolded text**`;\n\nvar markedOptions = {\n  breaks: true\n}\n\nfunction processHtml(id, text) {\n  document.getElementById(id).innerHTML = marked(text, markedOptions);\n}\n\nclass Previewer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      markdown: defaultText,\n      htmlPreview: this.htmlPreview(defaultText),\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: false,\n    })\n  }\n\n  htmlPreview(text) {\n    return marked(text, markedOptions)\n  }\n\n  componentDidUpdate() {\n    if (!this.state.loading) {\n      processHtml('preview', this.state.markdown)\n    }\n  }\n\n  updateText(event) {\n    this.setState({\n      markdown: event.target.value,\n      htmlPreview: this.htmlPreview(event.target.value),\n    });\n  }\n\n  render() {\n    return (<div>\n              <h2 id=\"main-h2\">Markdown</h2>\n              <textarea id=\"editor\" value={this.state.markdown} onChange={this.updateText.bind(this)}>{defaultText}</textarea>\n              <h2 id=\"main-h2\">HTML</h2>\n              <textarea id=\"html-preview\">{this.state.htmlPreview}</textarea>\n              <h2 id=\"main-h2\">Preview</h2>\n            </div>\n            )\n  }\n}\n\nReact.render(<Previewer />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}